import { AxiosRequestConfig } from 'axios';
import { B as BTPBaseLLMParameters, b as BaseLLMClient, c as BTPLLMHttpClient, a as BTPLLMResult } from '../base-cac7307b.js';
import '../config-822cfdeb.js';
import '@sap-cloud-sdk/util';

/**
 * BTP Amazon Titan Text Models
 */
type BTPAmazonTitanTextModel = "amazon-titan-tg1-large";
/**
 * BTP Amazon Titan Embedding Models
 */
type BTPAmazonTitanEmbeddingModel = "amazon-titan-e1t-medium";
/**
 * BTP LLM Amazon Titan Input Parameters
 */
interface BTPAmazonTitanParameters {
    /**
     * The prompt to generate completions for.
     */
    inputText: string;
}
/**
 * BTP LLM Amazon Text Completion Input Parameters
 */
interface BTPAmazonTitanTextCompletionParameters extends BTPBaseLLMParameters<BTPAmazonTitanTextModel>, BTPAmazonTitanParameters {
    /**
     * Text generation configuration
     */
    textGenerationConfig?: {
        /**
         * The maximum number of tokens to generate in the completion.
         */
        maxTokenCount?: number;
        /**
         * What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 for ones with a well-defined answer.
         */
        temperature?: number;
        /**
         * Stop sequences where the API will stop generating further tokens.
         */
        stopSequences?: unknown[];
        /**
         * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
         */
        topP?: number;
    };
}
/**
 * BTP LLM Amazon Text Embedding Parameters
 */
interface BTPAmazonTitanEmbeddingParameters extends BTPBaseLLMParameters<BTPAmazonTitanEmbeddingModel>, BTPAmazonTitanParameters {
}
/**
 * BTP LLM Amazon Titan Completion Output Result
 */
interface BTPAmazonTitanLLMOutput extends BTPLLMResult {
    /**
     * Token count of Input Text
     */
    inputTextTokenCount: number;
}
/**
 * BTP LLM Amazon Titan Text Completion Output Result
 */
interface BTPAmazonTitanTextCompletionResult extends BTPAmazonTitanLLMOutput {
    /**
     * Text completion results
     */
    results: {
        /**
         * Completion reason
         */
        completionReason: string;
        /**
         * Completed text response
         */
        outputText: string;
        /**
         * Token count of output text
         */
        tokenCount: number;
    }[];
}
/**
 * BTP LLM Amazon Titan Embedding Output Result
 */
interface BTPAmazonTitanEmbeddingResult extends BTPAmazonTitanLLMOutput {
    /**
     * Embedding vector
     */
    embedding: number[];
}
/**
 * BTP LLM Amazon Titan Client
 */
declare class BTPAmazonTitanClient extends BaseLLMClient {
    /**
     * @param httpClient HTTP Client
     */
    constructor(httpClient?: BTPLLMHttpClient);
    /**
     * Creates a Text Completion
     *
     * @param params the payload to send to the API
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Response data as JSON
     * @throws {@link BTPLLMError} in case of HTTP errors
     */
    createTextCompletion(params: BTPAmazonTitanTextCompletionParameters, requestConfig?: AxiosRequestConfig): Promise<BTPAmazonTitanTextCompletionResult>;
    /**
     * Creates an Embedding
     *
     * @param params the payload to send to the API
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Response data as JSON
     * @throws {@link BTPLLMError} in case of HTTP errors
     */
    createEmbedding(params: BTPAmazonTitanEmbeddingParameters, requestConfig?: AxiosRequestConfig): Promise<BTPAmazonTitanEmbeddingResult>;
}

export { BTPAmazonTitanClient, type BTPAmazonTitanEmbeddingModel, type BTPAmazonTitanEmbeddingParameters, type BTPAmazonTitanEmbeddingResult, type BTPAmazonTitanTextCompletionParameters, type BTPAmazonTitanTextCompletionResult, type BTPAmazonTitanTextModel };
