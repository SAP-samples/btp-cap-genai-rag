'use strict';

var base = require('langchain/llms/base');
var client_amazon = require('../../client/amazon.cjs');
require('../../base-921f7eb6.cjs');
require('@sap-cloud-sdk/util');
require('../../index-2134ea38.cjs');
require('@sap/xsenv');
require('fs');
require('util');
require('axios');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BTPAmazonTitan extends base.LLM {
  constructor(fields) {
    var _a;
    super(__spreadValues({}, fields));
    __publicField(this, "btpAmazonTitanClient");
    __publicField(this, "deployment_id");
    __publicField(this, "maxTokenCount");
    __publicField(this, "temperature");
    __publicField(this, "stopSequences");
    __publicField(this, "topP");
    this.deployment_id = (_a = fields == null ? void 0 : fields.deployment_id) != null ? _a : "amazon-titan-tg1-large";
    this.maxTokenCount = fields == null ? void 0 : fields.maxTokenCount;
    this.temperature = fields == null ? void 0 : fields.temperature;
    this.stopSequences = fields == null ? void 0 : fields.stopSequences;
    this.topP = fields == null ? void 0 : fields.topP;
    this.btpAmazonTitanClient = new client_amazon.BTPAmazonTitanClient();
  }
  _llmType() {
    return "amazon-titan";
  }
  async _call(prompt, options, runManager) {
    const res = await this.caller.callWithOptions(
      {
        signal: options.signal
      },
      () => {
        var _a;
        return this.btpAmazonTitanClient.createTextCompletion(
          {
            deployment_id: this.deployment_id,
            inputText: prompt,
            textGenerationConfig: {
              maxTokenCount: this.maxTokenCount,
              temperature: this.temperature,
              stopSequences: (_a = options == null ? void 0 : options.stop) != null ? _a : this.stopSequences,
              topP: this.topP
            }
          },
          {
            signal: options.signal,
            timeout: options.timeout
          }
        );
      }
    );
    await (runManager == null ? void 0 : runManager.handleLLMNewToken(res.results[0].outputText));
    return res.results[0].outputText;
  }
}

exports.BTPAmazonTitan = BTPAmazonTitan;
