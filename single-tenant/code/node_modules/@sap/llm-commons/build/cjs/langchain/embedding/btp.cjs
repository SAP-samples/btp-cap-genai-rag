'use strict';

var base = require('langchain/embeddings/base');
var client_btp = require('../../client/btp.cjs');
require('../../index-2134ea38.cjs');
require('@sap-cloud-sdk/util');
require('@sap/xsenv');
require('fs');
require('util');
require('../../utils-b80ecc7f.cjs');
require('../../client/ai21.cjs');
require('../../base-921f7eb6.cjs');
require('axios');
require('../../client/alephalpha.cjs');
require('../../client/amazon.cjs');
require('../../client/anthropic.cjs');
require('../../client/cohere.cjs');
require('../../client/google.cjs');
require('../../client/huggingface.cjs');
require('../../client/openai.cjs');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BTPLLMProxyEmbedding extends base.Embeddings {
  constructor(fields) {
    var _a, _b;
    super(__spreadValues({}, fields));
    __publicField(this, "BTPLLMProxyClient");
    __publicField(this, "deployment_id");
    __publicField(this, "batchSize", 512);
    __publicField(this, "stripNewLines", true);
    this.deployment_id = (_a = fields == null ? void 0 : fields.deployment_id) != null ? _a : "text-embedding-ada-002-v2";
    this.stripNewLines = (_b = fields == null ? void 0 : fields.stripNewLines) != null ? _b : this.stripNewLines;
    this.BTPLLMProxyClient = new client_btp.BTPLLMProxyClient();
  }
  async embedDocuments(documents) {
    return Promise.all(documents.map((document) => this.embedQuery(document)));
  }
  async embedQuery(query) {
    const res = await this.caller.callWithOptions(
      {},
      () => this.BTPLLMProxyClient.createEmbedding({
        deployment_id: this.deployment_id,
        input: query
      })
    );
    return res.data[0].embedding;
  }
}

exports.BTPLLMProxyEmbedding = BTPLLMProxyEmbedding;
