'use strict';

var googlepalm = require('langchain/embeddings/googlepalm');
var client_google = require('../../client/google.cjs');
require('../../base-921f7eb6.cjs');
require('@sap-cloud-sdk/util');
require('../../index-2134ea38.cjs');
require('@sap/xsenv');
require('fs');
require('util');
require('axios');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BTPGooglePaLMEmbedding extends googlepalm.GooglePaLMEmbeddings {
  constructor(fields) {
    var _a;
    super(__spreadProps(__spreadValues({}, fields), { apiKey: "dummy" }));
    __publicField(this, "btpGooglePaLMClient");
    __publicField(this, "deployment_id");
    this.deployment_id = (_a = fields == null ? void 0 : fields.deployment_id) != null ? _a : "gcp-textembedding-gecko-001";
    this.btpGooglePaLMClient = new client_google.BTPGooglePaLMClient();
  }
  async embedQuery(document) {
    return (await this.embedText([document]))[0];
  }
  async embedDocuments(documents) {
    return this.caller.callWithOptions({}, this.embedText.bind(this), documents);
  }
  async embedText(texts) {
    const cleanedText = texts.map((t) => t.replace(/\n/g, " "));
    const res = await this.btpGooglePaLMClient.embedText({
      deployment_id: this.deployment_id,
      instances: cleanedText.map((ct) => ({
        content: ct
      }))
    });
    return res.predictions.map((p) => p.embeddings.values);
  }
}

exports.BTPGooglePaLMEmbedding = BTPGooglePaLMEmbedding;
