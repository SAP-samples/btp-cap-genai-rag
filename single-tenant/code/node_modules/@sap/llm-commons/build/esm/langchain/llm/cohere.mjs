import { BTPCohereCommandClient } from '../../client/cohere.mjs';
import { Cohere } from 'langchain/llms/cohere';
import '../../base-540b2ebe.mjs';
import '@sap-cloud-sdk/util';
import '../../index-924dd70f.mjs';
import '@sap/xsenv';
import 'fs';
import 'util';
import 'axios';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BTPCohereCommand extends Cohere {
  constructor(fields) {
    var _a;
    super(__spreadProps(__spreadValues({}, fields), { apiKey: "dummy" }));
    __publicField(this, "btpCohereCommandClient");
    __publicField(this, "deployment_id");
    __publicField(this, "k");
    __publicField(this, "p");
    this.deployment_id = (_a = fields == null ? void 0 : fields.deployment_id) != null ? _a : "cohere-command";
    this.k = fields == null ? void 0 : fields.k;
    this.p = fields == null ? void 0 : fields.p;
    this.btpCohereCommandClient = new BTPCohereCommandClient();
  }
  async _call(prompt, options, runManager) {
    const res = await this.caller.callWithOptions(
      {
        signal: options.signal
      },
      () => this.btpCohereCommandClient.createTextCompletion(
        {
          deployment_id: this.deployment_id,
          prompt,
          max_tokens: this.maxTokens,
          temperature: this.temperature,
          p: this.p,
          k: this.k
        },
        {
          signal: options.signal,
          timeout: options.timeout
        }
      )
    );
    await (runManager == null ? void 0 : runManager.handleLLMNewToken(res.generations[0].text));
    return res.generations[0].text;
  }
}

export { BTPCohereCommand };
