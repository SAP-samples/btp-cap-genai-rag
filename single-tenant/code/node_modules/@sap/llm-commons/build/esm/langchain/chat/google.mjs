import { ChatGooglePaLM } from 'langchain/chat_models/googlepalm';
import { AIMessage } from 'langchain/schema';
import { BTPGooglePaLMClient } from '../../client/google.mjs';
import '../../base-540b2ebe.mjs';
import '@sap-cloud-sdk/util';
import '../../index-924dd70f.mjs';
import '@sap/xsenv';
import 'fs';
import 'util';
import 'axios';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BTPGooglePaLMChat extends ChatGooglePaLM {
  constructor(fields) {
    var _a, _b;
    super(__spreadProps(__spreadValues({}, fields), { apiKey: "dummy" }));
    __publicField(this, "btpGooglePaLMClient");
    __publicField(this, "deployment_id");
    __publicField(this, "maxOutputTokens");
    this.deployment_id = (_a = fields == null ? void 0 : fields.deployment_id) != null ? _a : "gcp-chat-bison-001";
    this.maxOutputTokens = (_b = fields == null ? void 0 : fields.maxOutputTokens) != null ? _b : 1024;
    this.btpGooglePaLMClient = new BTPGooglePaLMClient();
  }
  get callKeys() {
    return [...super.callKeys];
  }
  get lc_secrets() {
    return {};
  }
  get lc_aliases() {
    return {};
  }
  async _generate(messages, options, runManager) {
    const res = await this.caller.callWithOptions(
      {
        signal: options.signal
      },
      () => this.btpGooglePaLMClient.predictChat(
        {
          deployment_id: this.deployment_id,
          instances: [
            {
              context: this.getPalmContextInstruction(messages),
              examples: options.examples,
              messages: this.mapBaseMessagesToBTPGooglePaLMMessages(messages)
            }
          ],
          parameters: {
            maxOutputTokens: this.maxOutputTokens === -1 ? 1024 : this.maxOutputTokens,
            temperature: this.temperature,
            topK: this.topK,
            topP: this.topP
          }
        },
        {
          signal: options.signal,
          timeout: options.timeout
        }
      )
    );
    await (runManager == null ? void 0 : runManager.handleLLMNewToken(res.predictions[0].candidates[0].content));
    return this.mapBTPGooglePaLMMessagesToChatResult(res);
  }
  /**
   * Maps a {@link BaseMessage} to OpenAI's Message Role
   */
  mapBaseMessageToAuthor(message) {
    if (message.name) {
      return message.name;
    } else if (message._getType() === "generic") {
      return message.role;
    } else {
      return message._getType();
    }
  }
  /**
   * Maps {@link BaseMessage} to GooglePaLM Messages
   */
  mapBaseMessagesToBTPGooglePaLMMessages(messages) {
    const nonSystemMessages = messages.filter((m) => m._getType() !== "system");
    return nonSystemMessages.map((m) => ({
      content: m.content,
      author: this.mapBaseMessageToAuthor(m)
    }));
  }
  /**
   * Maps GooglePaLM messages to LangChain's {@link ChatResult}
   */
  mapBTPGooglePaLMMessagesToChatResult(res) {
    return {
      generations: res.predictions.map((c) => ({
        text: c.candidates[0].content,
        message: new AIMessage({
          content: c.candidates[0].content,
          name: c.candidates[0].author,
          additional_kwargs: {
            citationMetadata: c.citationMetadata,
            safetyAttributes: c.safetyAttributes
          }
        }),
        generationInfo: {
          citationMetadata: c.citationMetadata,
          safetyAttributes: c.safetyAttributes
        }
      })),
      llmOutput: {
        tokenUsage: {
          completionTokens: res.metadata.tokenMetadata.outputTokenCount.totalTokens,
          promptTokens: res.metadata.tokenMetadata.inputTokenCount.totalTokens,
          totalTokens: res.metadata.tokenMetadata.inputTokenCount.totalTokens + res.metadata.tokenMetadata.outputTokenCount.totalTokens
        }
      }
    };
  }
  getPalmContextInstruction(messages) {
    const systemMessage = messages.length > 0 && messages[0]._getType() === "system" ? messages[0] : void 0;
    return systemMessage == null ? void 0 : systemMessage.content;
  }
}

export { BTPGooglePaLMChat };
