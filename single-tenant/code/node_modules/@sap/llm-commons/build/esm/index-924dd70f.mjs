import { createLogger, isNullish } from '@sap-cloud-sdk/util';
import xsenv from '@sap/xsenv';
import * as fs from 'fs';
import * as util from 'util';

class BTPLLMError extends Error {
  /**
   * BTP LLM Error
   *
   * @param message Custom error message
   * @param cause Underlying actual error
   */
  constructor(message, cause) {
    super(message);
    this.name = "BTPLLMError";
    this.cause = cause;
  }
}

const readFile = util.promisify(fs.readFile);
function loadFromParams(baseUrl, clientId, clientSecret, tokenUrl) {
  if (clientId && clientSecret && tokenUrl && baseUrl) {
    return {
      llmProxyBaseUrl: baseUrl,
      oauthClientId: clientId,
      oauthClientSecret: clientSecret,
      oauthTokenUrl: tokenUrl
    };
  }
}
function loadFromEnvVariables() {
  if (process.env.BTP_LLM_CLIENT_ID && process.env.BTP_LLM_CLIENT_SECRET && process.env.BTP_LLM_AUTH_URL && process.env.BTP_LLM_API_BASE) {
    return {
      llmProxyBaseUrl: process.env.BTP_LLM_API_BASE,
      oauthClientId: process.env.BTP_LLM_CLIENT_ID,
      oauthClientSecret: process.env.BTP_LLM_CLIENT_SECRET,
      oauthTokenUrl: process.env.BTP_LLM_AUTH_URL
    };
  }
}
function loadFromVcapServices() {
  try {
    const serviceCredentials = xsenv.serviceCredentials({
      label: "azure-openai-service-demo"
    });
    if (serviceCredentials) {
      return {
        llmProxyBaseUrl: serviceCredentials.url,
        oauthClientId: serviceCredentials.uaa.clientid,
        oauthClientSecret: serviceCredentials.uaa.clientsecret,
        oauthTokenUrl: serviceCredentials.uaa.url
      };
    }
  } catch (_) {
  }
}
async function loadFromBTPConfigJsonFile() {
  const profile = process.env.BTP_LLM_PROFILE;
  const filePath = `${process.env.HOME}/.btp_llm/config${profile ? "_" + profile : ""}.json`;
  try {
    const data = await readFile(filePath, "utf8");
    const credentials = JSON.parse(data);
    if (credentials.BTP_LLM_CLIENT_ID && credentials.BTP_LLM_CLIENT_SECRET && credentials.BTP_LLM_AUTH_URL && credentials.BTP_LLM_API_BASE) {
      return {
        llmProxyBaseUrl: credentials.BTP_LLM_API_BASE,
        oauthClientId: credentials.BTP_LLM_CLIENT_ID,
        oauthClientSecret: credentials.BTP_LLM_CLIENT_SECRET,
        oauthTokenUrl: credentials.BTP_LLM_AUTH_URL
      };
    }
  } catch (_) {
  }
}
const loadConfig = async (params) => {
  const logger = createLogger("btp-llm-commons:config-loader");
  try {
    const configFromParams = loadFromParams(
      params == null ? void 0 : params.llmProxyBaseUrl,
      params == null ? void 0 : params.oauthClientId,
      params == null ? void 0 : params.oauthClientSecret,
      params == null ? void 0 : params.oauthTokenUrl
    );
    if (configFromParams) {
      logger.info("BTP LLM credentials loaded from parameters");
      return configFromParams;
    } else {
      logger.debug(`No BTP LLM credentials found as parameters`);
    }
    const configFromEnv = loadFromEnvVariables();
    if (configFromEnv) {
      logger.info(`BTP LLM credentials loaded from environment variables`);
      return configFromEnv;
    } else {
      logger.debug(`No BTP LLM credentials found in environment variables`);
    }
    const configFromVcapServices = loadFromVcapServices();
    if (configFromVcapServices) {
      logger.info(`BTP LLM credentials loaded from VCAP_SERVICES`);
      return configFromVcapServices;
    } else {
      logger.debug(`No BTP LLM credentials found in VCAP_SERVICES`);
    }
    const configFromConfigJsonFile = await loadFromBTPConfigJsonFile();
    if (configFromConfigJsonFile) {
      logger.info(`BTP LLM credentials loaded from .btp_llm/config.json`);
      return configFromConfigJsonFile;
    } else {
      throw new BTPLLMError(`No BTP LLM credentials found in environment variables, VCAP_SERVICES or .btp_llm/config.json`);
    }
  } catch (_err) {
    const err = _err;
    throw new BTPLLMError(`Error loading BTP LLM config: ${err.message}`);
  }
};

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const _BTPLLMContext = class _BTPLLMContext {
  constructor(config) {
    /**
     * BTP LLM Configuration
     */
    __publicField(this, "config");
    this.config = config;
  }
  /**
   * Initializes the context such as authentication, configuration etc.
   * @param params (optional) configuration parameters
   * @returns
   */
  static async init(params) {
    if (isNullish(this.instance)) {
      const config = await loadConfig(params);
      this.instance = new _BTPLLMContext(config);
    }
    return this.instance;
  }
  /**
   * Gets the configuration from context
   * @returns the configuration
   * @throws {@link BTPLLMError} when the context is not initialized
   */
  static getConfig() {
    if (isNullish(this.instance)) {
      throw new BTPLLMError(`BTPLLMContext not initialized`);
    }
    return this.instance.config;
  }
};
/**
 * BTP LLM Context Singleton
 */
__publicField(_BTPLLMContext, "instance");
let BTPLLMContext = _BTPLLMContext;

export { BTPLLMError as B, BTPLLMContext as a };
