import { B as BaseLLMClient } from '../base-540b2ebe.mjs';
import '@sap-cloud-sdk/util';
import '../index-924dd70f.mjs';
import '@sap/xsenv';
import 'fs';
import 'util';
import 'axios';

class BTPOpenAIGPTClient extends BaseLLMClient {
  /**
   * @param httpClient HTTP Client
   */
  constructor(httpClient) {
    super("openai-gpt", httpClient);
  }
  /**
   * Creates a Text Completion
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async createCompletion(params, requestConfig) {
    return this.getTextCompletionResponse(
      params,
      requestConfig
    );
  }
  /**
   * Creates a Chat Completion
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async createChatCompletion(params, requestConfig) {
    return this.getTextCompletionResponse(
      params,
      requestConfig
    );
  }
  /**
   * Creates an Embedding
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async createEmbedding(params, requestConfig) {
    return this.getEmbeddingResponse(params, requestConfig);
  }
}
const BTPOpenAIClient = BTPOpenAIGPTClient;

export { BTPOpenAIClient, BTPOpenAIGPTClient };
