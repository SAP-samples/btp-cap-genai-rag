import { CallbackManagerForLLMRun } from 'langchain/callbacks';
import { BaseLLMParams, LLM } from 'langchain/llms/base';
import { BTPAlephAlphaLuminousTextCompletionParameters, BTPAlephAlphaLuminousTextModel } from '../../client/alephalpha.js';
import { B as BTPBaseLLMParameters } from '../../base-cac7307b.js';
import 'axios';
import '../../config-822cfdeb.js';
import '@sap-cloud-sdk/util';

/**
 * Input for Text generation for AlephAlpha Luminous
 */
interface BTPAlephAlphaLuminousInput extends Omit<BTPAlephAlphaLuminousTextCompletionParameters, "prompt">, BTPBaseLLMParameters<BTPAlephAlphaLuminousTextModel>, BaseLLMParams {
}
/**
 * AlephAlpha Luminous Language Model Wrapper to generate texts
 *
 * **Note**: This does not extend the LangChain's AlephAlpha implementation since the LangChain
 * implementation has incorrect implementation of constructor input as the LLM class itself
 * rather than the input params.
 */
declare class BTPAlephAlphaLuminous extends LLM implements BTPAlephAlphaLuminousInput {
    private BTPAlephAlphaLuminousClient;
    deployment_id: BTPAlephAlphaLuminousTextModel;
    maximum_tokens: number;
    minimum_tokens?: number;
    echo?: boolean;
    temperature?: number;
    top_k?: number;
    top_p?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    sequence_penalty?: number;
    sequence_penalty_min_length?: number;
    repetition_penalties_include_prompt?: boolean;
    repetition_penalties_include_completion?: boolean;
    use_multiplicative_presence_penalty?: boolean;
    use_multiplicative_frequency_penalty?: boolean;
    use_multiplicative_sequence_penalty?: boolean;
    penalty_bias?: string;
    penalty_exceptions?: string[];
    penalty_exceptions_include_stop_sequences?: boolean;
    best_of?: number;
    n?: number;
    logit_bias?: object;
    log_probs?: number;
    tokens?: boolean;
    raw_completion?: boolean;
    disable_optimizations?: boolean;
    completion_bias_inclusion?: string[];
    completion_bias_inclusion_first_token_only?: boolean;
    completion_bias_exclusion?: string[];
    completion_bias_exclusion_first_token_only?: boolean;
    contextual_control_threshold?: number;
    control_log_additive?: boolean;
    stop_sequences?: string[];
    constructor(fields?: Partial<BTPAlephAlphaLuminousInput>);
    _llmType(): string;
    _call(prompt: string, options: this["ParsedCallOptions"], runManager?: CallbackManagerForLLMRun | undefined): Promise<string>;
}

export { BTPAlephAlphaLuminous, type BTPAlephAlphaLuminousInput };
