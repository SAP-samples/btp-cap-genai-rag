import { CallbackManagerForLLMRun } from 'langchain/callbacks';
import { OpenAIChatInput, ChatOpenAI, ChatOpenAICallOptions } from 'langchain/chat_models/openai';
import { BaseMessage, ChatResult } from 'langchain/schema';
import { B as BTPBaseLLMParameters } from '../../base-cac7307b.js';
import { BTPOpenAIGPTChatModel, BTPOpenAIGPTFunction, BTPOpenAIGPTMessage, BTPOpenAIGPTChatCompletionResult, BTPOpenAIGPTFunctionCall } from '../../client/openai.js';
import { BaseChatModelParams } from 'langchain/chat_models/base';
import { StructuredTool } from 'langchain/tools';
import 'axios';
import '../../config-822cfdeb.js';
import '@sap-cloud-sdk/util';
import 'zod-to-json-schema/src/parseDef.js';

/**
 * Input for Text generation for OpenAI GPT
 */
interface BTPOpenAIGPTChatInput extends Omit<OpenAIChatInput, "modelName" | "openAIApiKey" | "streaming">, BTPBaseLLMParameters<BTPOpenAIGPTChatModel>, BaseChatModelParams {
}
/**
 * Chat Call options
 */
interface BTPOpenAIChatCallOptions extends Omit<ChatOpenAICallOptions, "promptIndex" | "functions" | "function_call"> {
    functions?: BTPOpenAIGPTFunction[];
    function_call?: BTPOpenAIGPTFunctionCall;
}
/**
 * OpenAI Language Model Wrapper to generate texts
 */
declare class BTPOpenAIGPTChat extends ChatOpenAI implements BTPOpenAIGPTChatInput {
    CallOptions: BTPOpenAIChatCallOptions;
    private btpOpenAIClient;
    deployment_id: BTPOpenAIGPTChatModel;
    constructor(fields?: Partial<BTPOpenAIGPTChatInput>);
    get callKeys(): (keyof BTPOpenAIChatCallOptions)[];
    get lc_secrets(): {
        [key: string]: string;
    } | undefined;
    get lc_aliases(): Record<string, string>;
    _generate(messages: BaseMessage[], options: this["CallOptions"], runManager?: CallbackManagerForLLMRun): Promise<ChatResult>;
    /**
     * Maps a LangChain {@link StructuredTool} to {@link BTPOpenAIGPTFunction}
     */
    protected mapToolToBTPOpenAIFunction(tool: StructuredTool): BTPOpenAIGPTFunction;
    /**
     * Maps a {@link BaseMessage} to OpenAI's Message Role
     */
    protected mapBaseMessageToRole(message: BaseMessage): BTPOpenAIGPTMessage["role"];
    /**
     * Maps {@link BaseMessage} to OpenAI Messages
     */
    protected mapBaseMessagesToBTPOpenAIMessages(messages: BaseMessage[], options: BTPOpenAIChatCallOptions): BTPOpenAIGPTMessage[];
    /**
     * Maps OpenAI messages to LangChain's {@link ChatResult}
     */
    protected mapBTPOpenAIMessagesToChatResult(res: BTPOpenAIGPTChatCompletionResult): ChatResult;
}
/**
 * @deprecated Use {@link BTPOpenAIGPTChat} instead
 */
declare const BTPOpenAIChat: typeof BTPOpenAIGPTChat;

export { BTPOpenAIChat, BTPOpenAIGPTChat, type BTPOpenAIGPTChatInput };
