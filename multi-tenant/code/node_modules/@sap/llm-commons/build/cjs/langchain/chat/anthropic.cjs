'use strict';

var anthropic = require('langchain/chat_models/anthropic');
var schema = require('langchain/schema');
var client_anthropic = require('../../client/anthropic.cjs');
require('../../base-921f7eb6.cjs');
require('@sap-cloud-sdk/util');
require('../../index-2134ea38.cjs');
require('@sap/xsenv');
require('fs');
require('util');
require('axios');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BTPAnthropicClaudeChat extends anthropic.ChatAnthropic {
  constructor(fields) {
    var _a;
    super(__spreadProps(__spreadValues({}, fields), { anthropicApiKey: "dummy" }));
    __publicField(this, "btpAnthropicClaudeClient");
    __publicField(this, "deployment_id");
    this.deployment_id = (_a = fields == null ? void 0 : fields.deployment_id) != null ? _a : "anthropic-claude-instant-v1";
    this.topP = 0.7;
    this.topK = 5;
    this.btpAnthropicClaudeClient = new client_anthropic.BTPAnthropicClaudeClient();
  }
  get lc_secrets() {
    return {};
  }
  get lc_aliases() {
    return {};
  }
  async _generate(messages, options, runManager) {
    const res = await this.caller.callWithOptions(
      {
        signal: options.signal
      },
      () => this.btpAnthropicClaudeClient.createChatCompletion(
        {
          deployment_id: this.deployment_id,
          messages: this.mapBaseMessagesToBTPAnthropicClaudeMessages(messages),
          max_tokens_to_sample: this.maxTokensToSample === -1 ? 1024 : this.maxTokensToSample,
          stop_sequences: this.stopSequences,
          temperature: this.temperature,
          top_p: this.topP,
          top_k: this.topK
        },
        {
          signal: options.signal,
          timeout: options.timeout
        }
      )
    );
    await (runManager == null ? void 0 : runManager.handleLLMNewToken(res.completion));
    return this.mapBTPAnthropicClaudeMessagesToChatResult(res);
  }
  /**
   * Maps a {@link BaseMessage} to OpenAI's Message Role
   */
  mapBaseMessageToRole(message) {
    switch (message._getType()) {
      case "ai":
        return "Assistant";
      case "human":
        return "Human";
      case "system":
        return "Human";
      default:
        throw new Error(`Unknown message type: ${message._getType()}`);
    }
  }
  /**
   * Maps {@link BaseMessage} to Anthropic Claude Messages
   */
  mapBaseMessagesToBTPAnthropicClaudeMessages(messages) {
    return messages.map((m) => ({
      role: this.mapBaseMessageToRole(m),
      content: m.content
    }));
  }
  /**
   * Maps Anthropic Claude messages to LangChain's {@link ChatResult}
   */
  mapBTPAnthropicClaudeMessagesToChatResult(res) {
    return {
      generations: [
        {
          text: res.completion,
          message: new schema.AIMessage({
            content: res.completion,
            additional_kwargs: {
              stop_reason: res.stop_reason
            }
          }),
          generationInfo: {
            stop_reason: res.stop_reason
          }
        }
      ],
      llmOutput: {}
    };
  }
}

exports.BTPAnthropicClaudeChat = BTPAnthropicClaudeChat;
