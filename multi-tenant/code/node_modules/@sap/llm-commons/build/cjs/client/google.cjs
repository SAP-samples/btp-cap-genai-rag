'use strict';

var base = require('../base-921f7eb6.cjs');
require('@sap-cloud-sdk/util');
require('../index-2134ea38.cjs');
require('@sap/xsenv');
require('fs');
require('util');
require('axios');

class BTPGooglePaLMClient extends base.BaseLLMClient {
  /**
   * @param httpClient HTTP Client
   */
  constructor(httpClient) {
    super("google-palm", httpClient);
  }
  /**
   * Creates a Text Prediction
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async predictText(params, requestConfig) {
    return this.getTextCompletionResponse(
      params,
      requestConfig
    );
  }
  /**
   * Creates a Chat Prediction
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async predictChat(params, requestConfig) {
    return this.getTextCompletionResponse(
      params,
      requestConfig
    );
  }
  /**
   * Creates an Embedding
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async embedText(params, requestConfig) {
    return this.getEmbeddingResponse(params, requestConfig);
  }
}

exports.BTPGooglePaLMClient = BTPGooglePaLMClient;
