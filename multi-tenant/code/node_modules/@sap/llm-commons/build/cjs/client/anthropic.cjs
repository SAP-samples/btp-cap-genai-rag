'use strict';

var base = require('../base-921f7eb6.cjs');
require('@sap-cloud-sdk/util');
require('../index-2134ea38.cjs');
require('@sap/xsenv');
require('fs');
require('util');
require('axios');

const ANTHROPIC_HUMANPROMPT = "\n\nHuman:";
const ANTHROPIC_AIPROMPT = "\n\nAssistant:";
class BTPAnthropicClaudeClient extends base.BaseLLMClient {
  /**
   * @param httpClient HTTP Client
   */
  constructor(httpClient) {
    super("anthropic-claude", httpClient);
  }
  /**
   * Creates a Text Completion
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async createTextCompletion(params, requestConfig) {
    return this.getTextCompletionResponse(
      params,
      requestConfig
    );
  }
  /**
   * Creates a Chat Completion
   *
   * **Note**: Chat completion is just a wrapper around text completion with Chat-specific types.
   *
   * @param params the payload to send to the API
   * @param requestConfig Axios Request Configuration
   *
   * @see https://axios-http.com/docs/req_config
   * @see https://axios-http.com/docs/cancellation
   *
   * @returns HTTP Response data as JSON
   * @throws {@link BTPLLMError} in case of HTTP errors
   */
  async createChatCompletion(params, requestConfig) {
    params.messages.push({
      role: "Assistant",
      content: ""
    });
    const textParams = {
      deployment_id: params.deployment_id,
      prompt: params.messages.map(
        (message) => message.role === "Human" ? `${ANTHROPIC_HUMANPROMPT} ${message.content}` : `${ANTHROPIC_AIPROMPT} ${message.content}`
      ).join(""),
      max_tokens_to_sample: params.max_tokens_to_sample,
      stop_sequences: params.stop_sequences,
      temperature: params.temperature,
      top_k: params.top_k,
      top_p: params.top_p
    };
    return this.createTextCompletion(textParams, requestConfig);
  }
}

exports.ANTHROPIC_AIPROMPT = ANTHROPIC_AIPROMPT;
exports.ANTHROPIC_HUMANPROMPT = ANTHROPIC_HUMANPROMPT;
exports.BTPAnthropicClaudeClient = BTPAnthropicClaudeClient;
