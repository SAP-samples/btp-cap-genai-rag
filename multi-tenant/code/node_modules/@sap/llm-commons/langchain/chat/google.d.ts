import { BaseLanguageModelCallOptions } from 'langchain/base_language';
import { CallbackManagerForLLMRun } from 'langchain/callbacks';
import { BaseChatModelParams } from 'langchain/chat_models/base';
import { GooglePaLMChatInput, ChatGooglePaLM } from 'langchain/chat_models/googlepalm';
import { BaseMessage, ChatResult } from 'langchain/schema';
import { B as BTPBaseLLMParameters } from '../../base-cac7307b.js';
import { BTPGooglePaLMChatModel, BTPGooglePaLMChatMessage, BTPGooglePaLMChatPredictionResult, BTPGooglePaLMChatExample } from '../../client/google.js';
import 'axios';
import '../../config-822cfdeb.js';
import '@sap-cloud-sdk/util';

/**
 * Input for Text generation for Google PaLM
 */
interface BTPGooglePaLMChatInput extends Omit<GooglePaLMChatInput, "modelName" | "apiKey">, BTPBaseLLMParameters<BTPGooglePaLMChatModel>, BaseChatModelParams {
    /**
     * Maximum number of tokens that can be generated in the response. A token is approximately four characters.
     * 100 tokens correspond to roughly 60-80 words.
     *
     * Specify a lower value for shorter responses and a higher value for longer responses.
     */
    maxOutputTokens: number;
}
interface BTPGooglePaLMChatCallOptions extends BaseLanguageModelCallOptions {
    examples?: BTPGooglePaLMChatExample[];
}
/**
 * GooglePaLM Language Model Wrapper to generate texts
 */
declare class BTPGooglePaLMChat extends ChatGooglePaLM implements BTPGooglePaLMChatInput {
    CallOptions: BTPGooglePaLMChatCallOptions;
    private btpGooglePaLMClient;
    deployment_id: BTPGooglePaLMChatModel;
    maxOutputTokens: number;
    constructor(fields?: Partial<BTPGooglePaLMChatInput>);
    get callKeys(): (keyof BTPGooglePaLMChatCallOptions)[];
    get lc_secrets(): {
        [key: string]: string;
    } | undefined;
    get lc_aliases(): Record<string, string>;
    _generate(messages: BaseMessage[], options: this["CallOptions"], runManager?: CallbackManagerForLLMRun): Promise<ChatResult>;
    /**
     * Maps a {@link BaseMessage} to OpenAI's Message Role
     */
    protected mapBaseMessageToAuthor(message: BaseMessage): string;
    /**
     * Maps {@link BaseMessage} to GooglePaLM Messages
     */
    protected mapBaseMessagesToBTPGooglePaLMMessages(messages: BaseMessage[]): BTPGooglePaLMChatMessage[];
    /**
     * Maps GooglePaLM messages to LangChain's {@link ChatResult}
     */
    protected mapBTPGooglePaLMMessagesToChatResult(res: BTPGooglePaLMChatPredictionResult): ChatResult;
    protected getPalmContextInstruction(messages: BaseMessage[]): string | undefined;
}

export { BTPGooglePaLMChat, type BTPGooglePaLMChatInput };
