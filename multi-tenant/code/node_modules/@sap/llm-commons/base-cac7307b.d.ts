import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { B as BTPLLMConfigParameters } from './config-822cfdeb.js';
import { createLogger } from '@sap-cloud-sdk/util';

/**
 * Axios based HTTP Client for BTP LLM Proxy
 *
 * Note: This HTTP client automatically fetches, caches & injects the JWT token into request headers
 */
declare class BTPLLMHttpClient {
    /**
     * Configuration of the BTP LLM Proxy Client
     */
    private config;
    /**
     * Axios HTTP Client
     */
    private httpClient;
    /**
     * Cached JWT access token
     */
    private accessToken?;
    /**
     * @param config BTP LLM Configuration
     */
    constructor(config: BTPLLMConfigParameters);
    /**
     * Injects JWT token into Bearer `Authorization` header
     */
    private injectAccessToken;
    /**
     * Get HTTP Request
     *
     * @param path The API URL path
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Axios Response
     */
    get<I, O>(path: string, requestConfig?: AxiosRequestConfig<I>): Promise<AxiosResponse<O>>;
    /**
     * Post HTTP Request
     *
     * @param path The API URL path
     * @param data the payload to send to the API
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Axios Response
     */
    post<I, O>(path: string, data: I, requestConfig?: AxiosRequestConfig<I>): Promise<AxiosResponse<O>>;
}

type Logger = ReturnType<typeof createLogger>;

/**
 * Base LLM Input Parameters
 */
interface BTPBaseLLMParameters<T extends string> {
    /**
     * The model ID to choose
     */
    deployment_id: T;
}
/**
 * Base LLM Output Result
 */
interface BTPLLMResult {
}
/**
 * Base LLM Client.
 *
 * @description
 * This is a simple HTTP wrapper for the BTP LLM Proxy API. It handles OAuth handling to generate JWT tokens for
 * interacting with the APIs.
 */
declare class BaseLLMClient {
    /**
     * Name of the LLM for which the client is for
     */
    name: string;
    /**
     * Logger
     */
    logger: Logger;
    /**
     * HTTP Client
     */
    httpClient: BTPLLMHttpClient;
    /**
     * @param name LLM Client name
     * @param httpClient HTTP Client
     */
    constructor(name: string, httpClient?: BTPLLMHttpClient);
    /**
     *
     * @param path The API URL path
     * @param data the payload to send to the API
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Response data as JSON
     * @throws {@link BTPLLMError} in case of HTTP errors
     */
    private request;
    /**
     * Gets the Text Completion response
     *
     * @param data the payload to send to the API
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Response data as JSON
     * @throws {@link BTPLLMError} in case of HTTP errors
     */
    protected getTextCompletionResponse<I extends BTPBaseLLMParameters<string>, O>(data: I, requestConfig?: AxiosRequestConfig): Promise<O>;
    /**
     * Gets the Text Embedding response
     *
     * @param data the payload to send to the API
     * @param requestConfig Axios Request Configuration
     *
     * @see https://axios-http.com/docs/req_config
     * @see https://axios-http.com/docs/cancellation
     *
     * @returns HTTP Response data as JSON
     * @throws {@link BTPLLMError} in case of HTTP errors
     */
    protected getEmbeddingResponse<I extends BTPBaseLLMParameters<string>, O>(data: I, requestConfig?: AxiosRequestConfig): Promise<O>;
}

export { type BTPBaseLLMParameters as B, type BTPLLMResult as a, BaseLLMClient as b, BTPLLMHttpClient as c };
